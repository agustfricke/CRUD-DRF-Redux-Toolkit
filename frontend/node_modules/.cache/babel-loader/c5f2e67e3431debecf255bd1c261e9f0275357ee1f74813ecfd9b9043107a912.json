{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"./apiSlice\";\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.id - a.id\n});\nconst initialState = postsAdapter.getInitialState();\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getPosts: builder.query({\n      query: () => '/blogs/',\n      transformResponse: responseData => {\n        const loadedPosts = responseData.map(post => {\n          return post;\n        });\n        return postsAdapter.setAll(initialState, loadedPosts);\n      },\n      providesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: \"LIST\"\n      }, ...result.ids.map(id => ({\n        type: 'Post',\n        id\n      }))]\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/blogs/',\n        method: 'POST',\n        body: {\n          ...initialPost\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Post',\n        id: \"LIST\"\n      }]\n    }),\n    updatePost: builder.mutation({\n      query: initialPost => ({\n        url: `/blogs/${initialPost.id}/`,\n        method: 'PUT',\n        body: {\n          ...initialPost\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: arg.id\n      }]\n    }),\n    deletePost: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/blogs/${id}/`,\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useUpdatePostMutation,\n  useDeletePostMutation,\n  useAddNewPostMutation,\n  useGetPostsQuery\n} = extendedApiSlice;\nexport const selectPostsResult = extendedApiSlice.endpoints.getPosts.select();\nconst selectPostsData = createSelector(selectPostsResult, postsResult => postsResult.data);\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds\n} = postsAdapter.getSelectors(state => {\n  var _selectPostsData;\n  return (_selectPostsData = selectPostsData(state)) !== null && _selectPostsData !== void 0 ? _selectPostsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","postsAdapter","sortComparer","a","b","id","initialState","getInitialState","extendedApiSlice","injectEndpoints","endpoints","builder","getPosts","query","transformResponse","responseData","loadedPosts","map","post","setAll","providesTags","result","error","arg","type","ids","addNewPost","mutation","initialPost","url","method","body","invalidatesTags","updatePost","deletePost","_ref","useUpdatePostMutation","useDeletePostMutation","useAddNewPostMutation","useGetPostsQuery","selectPostsResult","select","selectPostsData","postsResult","data","selectAll","selectAllPosts","selectById","selectPostById","selectIds","selectPostIds","getSelectors","state","_selectPostsData"],"sources":["/home/agust/GitHub/CRUD-DRF-Redux-Toolkit/frontend/src/features/postsSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"./apiSlice\";\n\nconst postsAdapter = createEntityAdapter({\n    sortComparer: ((a, b) => b.id - a.id)\n});\n\nconst initialState = postsAdapter.getInitialState();\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getPosts: builder.query({\n            query: () => '/blogs/',\n            transformResponse: responseData => {\n                const loadedPosts = responseData.map( post => {\n                    return post\n                })\n                return postsAdapter.setAll(initialState, loadedPosts)\n            },\n            providesTags: (result, error, arg) => [\n                { type: 'Post', id: \"LIST\" },\n                ...result.ids.map(id => ({ type: 'Post', id }))\n            ]\n        }),\n        addNewPost: builder.mutation({\n            query: initialPost => ({\n                url: '/blogs/',\n                method: 'POST',\n                body: { ...initialPost }\n            }),\n            invalidatesTags: [\n                { type: 'Post', id: \"LIST\" }\n            ]\n        }),\n        updatePost: builder.mutation({\n            query: initialPost => ({\n                url: `/blogs/${initialPost.id}/`,\n                method: 'PUT',\n                body: { ...initialPost }\n            }), \n            invalidatesTags: (result, error, arg) => [\n                { type: 'Post',id: arg.id }\n            ]\n        }), \n        deletePost: builder.mutation({\n            query: ({ id }) => ({\n                url: `/blogs/${id}/`,\n                method: 'DELETE',\n                body: { id }\n            }), \n            invalidatesTags: (result, error, arg) => [\n                { type: 'Post', id: arg.id }\n            ]\n        })\n    })\n});\n\nexport const { \n    useUpdatePostMutation,\n    useDeletePostMutation,\n    useAddNewPostMutation,\n    useGetPostsQuery, \n} = extendedApiSlice;\n\nexport const selectPostsResult = extendedApiSlice.endpoints.getPosts.select();\n\nconst selectPostsData = createSelector(\n    selectPostsResult,\n    postsResult => postsResult.data\n)\n\nexport const { \n    selectAll: selectAllPosts,\n    selectById: selectPostById, \n    selectIds: selectPostIds \n} = postsAdapter.getSelectors(state => selectPostsData(state) ?? initialState) \n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}