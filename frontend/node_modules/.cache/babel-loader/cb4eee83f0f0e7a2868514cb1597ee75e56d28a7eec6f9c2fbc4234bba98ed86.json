{"ast":null,"code":"var _jsxFileName = \"/home/agust/GitHub/CRUD-DRF-Redux-Toolkit/frontend/src/components/PostList.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { selectPostIds } from \"../features/postsSlice\";\nimport { useGetPostsQuery } from \"../features/postsSlice\";\nimport PostsExcerpt from \"./PostsExcerpt\";\nimport AddNewPost from \"./AddNewPost\";\nimport Loader from \"./Loader\";\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  // Ponemos los diferentes estados que podemos recibir de useGetPostsQuery\n  const {\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetPostsQuery();\n  const orderedPostIds = useSelector(selectPostIds);\n  const err = err => toast.error(err);\n  let content;\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 19\n    }, this);\n  } else if (isSuccess) {\n    content = orderedPostIds.map(postId => /*#__PURE__*/_jsxDEV(PostsExcerpt, {\n      postId: postId\n    }, postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this));\n  } else if (isError) {\n    err(error);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AddNewPost, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"LzakWINoCS/Hj2Rkdp/K1LZjIrA=\", false, function () {\n  return [useGetPostsQuery, useSelector];\n});\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["useSelector","selectPostIds","useGetPostsQuery","PostsExcerpt","AddNewPost","Loader","toast","jsxDEV","_jsxDEV","PostList","_s","isLoading","isSuccess","isError","error","orderedPostIds","err","content","fileName","_jsxFileName","lineNumber","columnNumber","map","postId","children","_c","$RefreshReg$"],"sources":["/home/agust/GitHub/CRUD-DRF-Redux-Toolkit/frontend/src/components/PostList.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { selectPostIds } from \"../features/postsSlice\";\nimport { useGetPostsQuery } from \"../features/postsSlice\";\nimport PostsExcerpt from \"./PostsExcerpt\";\nimport  AddNewPost from \"./AddNewPost\";\nimport Loader from \"./Loader\";\nimport toast from 'react-hot-toast';\n\nconst PostList = () => {\n\n    // Ponemos los diferentes estados que podemos recibir de useGetPostsQuery\n    const { isLoading, isSuccess, isError, error } = useGetPostsQuery();\n    \n    const orderedPostIds = useSelector(selectPostIds);\n\n    const err = (err) => toast.error(err);\n\n    let content;\n    if (isLoading) {\n        content = <Loader/>\n    } else if (isSuccess) {\n        content = orderedPostIds.map(postId =>         \n            <PostsExcerpt key={postId} postId={postId}/>\n        )\n    } else if (isError) {\n        err(error)\n    }\n\n    return (\n        <div> \n            <AddNewPost/>\n            { content }\n        </div>\n    )\n}\nexport default PostList;\n\n\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAQC,UAAU,MAAM,cAAc;AACtC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnB;EACA,MAAM;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGZ,gBAAgB,EAAE;EAEnE,MAAMa,cAAc,GAAGf,WAAW,CAACC,aAAa,CAAC;EAEjD,MAAMe,GAAG,GAAIA,GAAG,IAAKV,KAAK,CAACQ,KAAK,CAACE,GAAG,CAAC;EAErC,IAAIC,OAAO;EACX,IAAIN,SAAS,EAAE;IACXM,OAAO,gBAAGT,OAAA,CAACH,MAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EACvB,CAAC,MAAM,IAAIT,SAAS,EAAE;IAClBK,OAAO,GAAGF,cAAc,CAACO,GAAG,CAACC,MAAM,iBAC/Bf,OAAA,CAACL,YAAY;MAAcoB,MAAM,EAAEA;IAAO,GAAvBA,MAAM;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAmB,CAC/C;EACL,CAAC,MAAM,IAAIR,OAAO,EAAE;IAChBG,GAAG,CAACF,KAAK,CAAC;EACd;EAEA,oBACIN,OAAA;IAAAgB,QAAA,gBACIhB,OAAA,CAACJ,UAAU;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,EACXJ,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACP;AAEd,CAAC;AAAAX,EAAA,CA1BKD,QAAQ;EAAA,QAGuCP,gBAAgB,EAE1CF,WAAW;AAAA;AAAAyB,EAAA,GALhChB,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}